# -*- python -*-
# ex: set syntax=python:

import os

from .buildutils import *  # noqa
from .ircbot import *  # noqa


# This is the buildmaster config file. It must be installed as
# 'master.cfg' in the buildmaster's base directory, /app.
repo_path = os.environ.get('REPO_PATH', 'https://github.com/opdemand/deis.git')
slave1_ubuntu = os.environ['BUILDSLAVE1_USER']
slave1_pass = os.environ['BUILDSLAVE1_PASS']
slave2_ubuntu = os.environ['BUILDSLAVE2_USER']
slave2_pass = os.environ['BUILDSLAVE2_PASS']
slave3_debian = os.environ['BUILDSLAVE3_USER']
slave3_pass = os.environ['BUILDSLAVE3_PASS']
slave4_macosx = os.environ['BUILDSLAVE4_USER']
slave4_pass = os.environ['BUILDSLAVE4_PASS']
slave5_windows = os.environ['BUILDSLAVE5_USER']
slave5_pass = os.environ['BUILDSLAVE5_PASS']


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias "c" to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave(slave1_ubuntu, slave1_pass),
    BuildSlave(slave2_ubuntu, slave2_pass),
    BuildSlave(slave3_debian, slave3_pass),
    BuildSlave(slave4_macosx, slave4_pass),
    BuildSlave(slave5_windows, slave5_pass),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
# Deis' default configuration is not to poll, but only to act on push
# notifications from GitHub.com.

# from buildbot.changes.gitpoller import GitPoller
# c['change_source'] = []
# c['change_source'].append(
#     GitPoller(repo_path,
#               workdir='gitpoller-workdir', branch='master',
#               pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter

PROJECTS = {
    'deis': 'https://github.com/opdemand/deis.git',
    'builder': 'https://github.com/deis/builder.git',
    'cache': 'https://github.com/deis/cache.git',
    'database': 'https://github.com/deis/database.git',
    'discovery': 'https://github.com/deis/discovery.git',
    'logger': 'https://github.com/deis/logger.git',
    'registry': 'https://github.com/deis/registry.git',
    'server': 'https://github.com/deis/server.git',
    # 'slugbuilder': 'https://github.com/deis/slugbuilder.git',
    # 'slugrunner': 'https://github.com/deis/slugrunner.git',
    'worker': 'https://github.com/deis/builder.git',
}

# all projects are configured to listen for GitHub service hooks on master
c['schedulers'] = [
    SingleBranchScheduler(
        name=proj,
        change_filter=filter.ChangeFilter(project=proj, branch='master'),
        treeStableTimer=5 * 60,
        builderNames=[proj])
    for proj in PROJECTS
]

####### BUILD STEPS
from buildbot.process.properties import WithProperties
from buildbot.steps.python import Sphinx
from buildbot.steps.python_twisted import RemovePYCs
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test
from buildbot.steps.source.git import Git
from buildbot.steps.transfer import DirectoryUpload

git_deis = Git(repourl=repo_path, branch='master')
flake8_deis = ShellCommand(
    name='flake8', command=['make', 'flake8'],
    warnOnFailure=True, descriptionDone='flake8',
    env={'PATH': ['venv/bin', "${PATH}"]})
sphinx_deis = Sphinx(
    sphinx_builddir='docs/build', sphinx_sourcedir='docs',
    sphinx='venv/bin/sphinx-build', mode='full')
sphinx_copy_deis = DirectoryUpload(
    slavesrc='docs/build', masterdest='public_html/docs', url='/docs')
test_deis = Test(
    command=['venv/bin/coverage', 'run', 'manage.py', 'test',
             'api', 'cm', 'provider', 'web'])
pip_install = ShellCommand(
    name='pip', description='installing requirements',
    descriptionDone='install requirements',
    command=['venv/bin/pip', 'install', '-r', 'requirements.txt',
             '-r', 'dev_requirements.txt'])
config_deis = ShellCommand(
    name='configure', description='installing local_settings.py',
    descriptionDone='install local_settings.py',
    command=['cp', '/app/local_settings.py', 'deis/'])
coverage_erase = ShellCommand(
    name='erase coverage', command=['venv/bin/coverage', 'erase'],
    descriptionDone='erase coverage')
coverage_report = ShellCommand(
    name='coverage',
    command=['venv/bin/coverage', 'html',
             WithProperties('--directory=%(workdir)s/htmlcov-%(buildnumber)s')],
    descriptionDone='coverage report')
coverage_upload = TransferCoverageResults(
    slavesrc=WithProperties('%(workdir)s/htmlcov-%(buildnumber)s'),
    masterdest=WithProperties('~/public_html/htmlcov-%(buildnumber)s'))
remove_pycs = RemovePYCs()
virtualenv = ShellCommand(
    name='virtualenv', description='virtualenv',
    command="""
if [ ! -e venv ] ; then
  virtualenv venv
fi""", env={'PATH': '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin'})

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.  Note that
# any particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory

deis_factory = BuildFactory([
    git_deis, virtualenv, remove_pycs, pip_install, flake8_deis, config_deis,
    coverage_erase, test_deis, coverage_report, coverage_upload,
    sphinx_deis, sphinx_copy_deis])

from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(
        name='deis',
        slavenames=[slave1_ubuntu, slave2_ubuntu],
        factory=deis_factory)
]
for proj, repo_url in PROJECTS.items():
    if proj != 'deis':
        # "git pull", docker build", "/app/bin/test" steps
        image = "deis/{}:latest".format(proj)
        factory = BuildFactory([
            Git(repourl=repo_url, branch='master'),
            ShellCommand(
                command=['docker', 'build', '-t', image, '.'],
                descriptionDone='build docker image'),
            ShellCommand(
                command=['docker', 'run', '-t', image, '/app/bin/test'],
                descriptionDone='test docker image'),
        ])
        c['builders'].append(BuilderConfig(
            name=proj,
            slavenames=[slave1_ubuntu, slave2_ubuntu],
            factory=factory))
c['mergeRequests'] = True

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

import json
from buildbot.status.html import WebStatus
from buildbot.status.mail import MailNotifier

c['status'] = [
    WebStatus(8010, change_hook_dialects={'github': True})
]

try:
    irc_channel = os.environ['BUILDBOT_IRC_CHANNEL']
    irc_nickname = os.environ.get('BUILDBOT_IRC_NICKNAME', 'deis-bot')
    irc = IRC('irc.freenode.org', 'deis-bot', channels=[irc_channel],
              allowForce=True, notify_events={
                  'started': 1, 'finished': 1,
                  'success': 1, 'failure': 1, 'exception': 1
              })
    c['status'].append(irc)
except KeyError:
    print 'IRC status bot disabled.'

try:
    # email recipients can be specified as a JSON array of strings, e.g.:
    # $ export BUILDBOT_MAIL_RECIPIENTS='["ann@example.com", "sue@example.com"]'
    extra_recipients = json.loads(os.environ['BUILDBOT_MAIL_RECIPIENTS'])
except (KeyError, TypeError, ValueError):
    print 'No email recipients specified.'
    extra_recipients = []
try:
    from_addr = os.environ['BUILDBOT_MAIL_FROM_ADDR']
    relay_host = os.environ['BUILDBOT_MAIL_SMTP_RELAY']
    smtp_port = os.environ.get('BUILDBOT_MAIL_SMTP_PORT', 587)
    smtp_user = os.environ['BUILDBOT_MAIL_SMTP_USER']
    smtp_password = os.environ['BUILDBOT_MAIL_SMTP_PASSWORD']
    mail = MailNotifier(
        mode='change', builders=['deis', ], extra_recipients=extra_recipients,
        fromaddr=from_addr, relayhost=relay_host, smtpPort=smtp_port,
        smtpUser=smtp_user, smtpPassword=smtp_password)
    c['status'].append(mail)
except KeyError:
    print 'Email status disabled.'

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = os.environ.get('BUILDBOT_PROJECT_NAME', 'Deis')
c['titleURL'] = os.environ.get(
    'BUILDBOT_PROJECT_URL', 'https://github.com/opdemand/deis')

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = os.environ['BUILDBOT_URL']

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You
    # can leave this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
