# -*- python -*-
# ex: set syntax=python:

from collections import namedtuple
import os

from .buildutils import *  # noqa
from .ircbot import *  # noqa

# This is the buildmaster config file, master.cfg. It must be installed
# in the buildmaster's base directory, /app/master.
repo_path = os.environ.get('REPO_PATH', 'https://github.com/opdemand/deis.git')
slave1_ubuntu = os.environ['BUILDSLAVE1_USER']
slave1_pass = os.environ['BUILDSLAVE1_PASS']
slave2_debian = os.environ['BUILDSLAVE2_USER']
slave2_pass = os.environ['BUILDSLAVE2_PASS']
slave3_macosx = os.environ['BUILDSLAVE3_USER']
slave3_pass = os.environ['BUILDSLAVE3_PASS']
slave4_windows = os.environ['BUILDSLAVE4_USER']
slave4_pass = os.environ['BUILDSLAVE4_PASS']

# The main configuration dictionary that buildmaster reads. (We also use a
# shorter alias "c" to save typing.)
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave(slave1_ubuntu, slave1_pass),
    BuildSlave(slave2_debian, slave2_pass),
    BuildSlave(slave3_macosx, slave3_pass),
    BuildSlave(slave4_windows, slave4_pass),
]

# TCP port to listen on for connections, which must match the value configured
# into the buildslaves.
c['slavePortnum'] = 9989

####### SCHEDULERS

from buildbot.schedulers import basic
from buildbot.changes import filter

Project = namedtuple('Project', 'name repo_url branch dir project builders')
DOCKER_PROJECTS = [
    Project('base', 'https://github.com/deis/base.git', 'master', '.', 'base', ['base']),
    Project('data', 'https://github.com/deis/data.git', 'master', '.', 'data', ['data']),
    Project('slugbuilder', 'https://github.com/deis/slugbuilder.git', 'deis', '.',
            'slugbuilder', ['slugbuilder']),
    Project('slugrunner', 'https://github.com/deis/slugrunner.git', 'master', '.',
            'slugrunner', ['slugrunner']),
    Project('tester', 'https://github.com/deis/tester.git', 'master', '.', 'tester', ['tester']),
    Project('builder', 'https://github.com/opdemand/deis.git', 'master', 'builder', 'deis',
            ['builder']),
    Project('cache', 'https://github.com/opdemand/deis.git', 'master', 'cache', 'deis', ['cache']),
    Project('controller', 'https://github.com/opdemand/deis.git', 'master', 'controller',
            'deis', ['controller']),
    Project('database', 'https://github.com/opdemand/deis.git', 'master', 'database', 'deis',
            ['database']),
    Project('discovery', 'https://github.com/opdemand/deis.git', 'master', 'discovery', 'deis',
            ['discovery']),
    Project('logger', 'https://github.com/opdemand/deis.git', 'master', 'logger', 'deis',
            ['logger']),
    Project('registry', 'https://github.com/opdemand/deis.git', 'master', 'registry', 'deis',
            ['registry']),
]
# CLI_PROJECTS = [
#     Project('cli-debian', 'https://github.com/opdemand/deis.git', 'master', 'client',
#             ['cli-debian']),
#     Project('cli-macosx', 'https://github.com/opdemand/deis.git', 'master', 'client',
#             ['cli-macosx']),
#     Project('cli-win32', 'https://github.com/opdemand/deis.git', 'master', 'client',
#             ['cli-win32']),
#     Project('cli-win64', 'https://github.com/opdemand/deis.git', 'master', 'client',
#             ['cli-win64']),
# ]

# all projects are configured to listen for GitHub service hook push events
c['schedulers'] = [
    basic.SingleBranchScheduler(
        name=proj.name,
        change_filter=filter.ChangeFilter(project=proj.project, branch=proj.branch),
        treeStableTimer=5 * 60,
        builderNames=proj.builders)
    for proj in DOCKER_PROJECTS
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git

c['builders'] = []
for proj in DOCKER_PROJECTS:
    image = Interpolate("deis/%(kw:name)s:tester-%(prop:buildnumber)s", name=proj.name)
    git = Git(repourl=proj.repo_url, branch=proj.branch)
    build = ShellCommand(
        command=['docker', 'build', '-t', image, proj.dir],
        descriptionDone='build docker image')
    test = ShellCommand(
        command=['docker', 'run', '-t', image, 'make', 'test'],
        descriptionDone='test docker image')
    if proj.name in ['base', 'data', 'slugbuilder', 'slugrunner']:
        factory = BuildFactory([git, build])
    else:
        factory = BuildFactory([git, build, test])
    builder = BuilderConfig(
        name=proj.name,
        slavenames=[slave1_ubuntu, slave2_debian],
        factory=factory)
    c['builders'].append(builder)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.
import json
from buildbot.status.html import WebStatus
from buildbot.status.mail import MailNotifier

c['status'] = [
    WebStatus(8010, change_hook_dialects={'github': True})
]

try:
    irc_channel = os.environ['BUILDBOT_IRC_CHANNEL']
    irc_nickname = os.environ.get('BUILDBOT_IRC_NICKNAME', 'deis-bot')
    irc = IRC('irc.freenode.org', irc_nickname, channels=[irc_channel],
              allowForce=True, notify_events={
                  'started': 1, 'finished': 1,
                  'success': 1, 'failure': 1, 'exception': 1
              })
    c['status'].append(irc)
except KeyError:
    print 'IRC status bot disabled.'

try:
    # email recipients can be specified as a JSON array of strings, e.g.:
    # $ export BUILDBOT_MAIL_RECIPIENTS='["ann@example.com", "sue@example.com"]'
    extra_recipients = [str(r) for r in json.loads(os.environ['BUILDBOT_MAIL_RECIPIENTS'])]
except (KeyError, TypeError, ValueError) as err:
    print "No email recipients specified: {}".format(err)
    extra_recipients = []
try:
    from_addr = os.environ['BUILDBOT_MAIL_FROM_ADDR']
    relay_host = os.environ['BUILDBOT_MAIL_SMTP_RELAY']
    smtp_port = os.environ.get('BUILDBOT_MAIL_SMTP_PORT', 587)
    smtp_user = os.environ['BUILDBOT_MAIL_SMTP_USER']
    smtp_password = os.environ['BUILDBOT_MAIL_SMTP_PASSWORD']
    mail = MailNotifier(
        mode='change', builders=['deis', ], extraRecipients=extra_recipients,
        fromaddr=from_addr, relayhost=relay_host, smtpPort=smtp_port,
        smtpUser=smtp_user, smtpPassword=smtp_password)
    c['status'].append(mail)
except KeyError:
    print 'Email status disabled.'

####### PROJECT IDENTITY

# 'title' will appear on builbot's web pages, linked to 'titleURL'
c['title'] = os.environ.get('BUILDBOT_PROJECT_NAME', 'Deis')
c['titleURL'] = os.environ.get(
    'BUILDBOT_PROJECT_URL', 'https://github.com/opdemand/deis')
# 'buildbotURL' is the web server's externally visible address.
c['buildbotURL'] = os.environ['BUILDBOT_URL']

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # Sqlite3 works just fine for all but the hugest buildbot installations.
    'db_url': "sqlite:///state.sqlite",
}
